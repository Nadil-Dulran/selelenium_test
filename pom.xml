<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>selenium-automation</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>Selenium Automation Project</name>
  <url>https://nadil-dulran.github.io/selelenium_test/</url>

  <properties>
    <!-- ensure builds are reproducible across platforms by fixing encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <dependencies>
    <!-- Selenium Java -->
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>4.26.0</version>
    </dependency>

    <!-- JUnit 5 (removed) -->

    <!-- TestNG: required by tests under src/test/java using TestNG annotations -->
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>7.8.0</version>
      <scope>test</scope>
    </dependency>

    <!-- WebDriverManager -->
    <dependency>
      <groupId>io.github.bonigarcia</groupId>
      <artifactId>webdrivermanager</artifactId>
      <version>5.9.2</version>
    </dependency>

    <!-- ExtentReports core (HTML report) -->
    <dependency>
      <groupId>com.aventstack</groupId>
      <artifactId>extentreports</artifactId>
      <version>5.1.1</version>
      <scope>test</scope>
    </dependency>

    <!-- Bind SLF4J to a simple logger in tests to avoid StaticLoggerBinder warnings -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>1.7.36</version>
      <scope>test</scope>
    </dependency>

    <!-- Note: Selenium DevTools dependency omitted to avoid resolution issues; the CDP version warning is informational. -->

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <!-- use release to control both source and target and avoid cross-compilation issues -->
          <release>21</release>
          <!-- ensure the compiler uses the project's configured encoding -->
          <encoding>${project.build.sourceEncoding}</encoding>
          <!-- Disable annotation processing since project does not use Lombok or other processors -->
          <proc>none</proc>
        </configuration>
      </plugin>

      <!-- configure resources plugin to use the same encoding so the "platform encoding" warning disappears -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.3.1</version>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
      </plugin>

      <!-- Create CI-friendly artifact containing debug outputs from tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>package-test-debug</id>
            <phase>verify</phase>
            <configuration>
              <target>
                <!-- Ensure output dirs exist -->
                <mkdir dir="${project.build.directory}/surefire-reports/test-debug"/>
                <!-- Zip the debug folder if present -->
                <zip destfile="${project.build.directory}/test-debug.zip" whenempty="true">
                  <fileset dir="${project.build.directory}/test-debug"/>
                </zip>
                <!-- Copy the zipped artifact into surefire-reports for CI artifact collection -->
                <copy file="${project.build.directory}/test-debug.zip" todir="${project.build.directory}/surefire-reports/test-debug" failonerror="false"/>
                <!-- Also copy raw files so CI that prefers raw folders can pick them up -->
                <copy todir="${project.build.directory}/surefire-reports/test-debug" failonerror="false">
                  <fileset dir="${project.build.directory}/test-debug" includes="**/*"/>
                </copy>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- JUnit 5 Surefire plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <dependencies>
          <!-- Ensure Surefire uses the TestNG provider so TestNG tests and suites are executed -->
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-testng</artifactId>
            <version>3.2.5</version>
          </dependency>
        </dependencies>
        <configuration>
          <!-- Run TestNG suite explicitly so TestNG tests are executed under Surefire -->
          <suiteXmlFiles>
            <suiteXmlFile>testng.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <reporting>
    <plugins>
      <!-- Project information reports with explicit version; exclude problematic dependency-info report -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>3.9.0</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>index</report>
              <report>summary</report>
              <report>licenses</report>
              <report>scm</report>
              <report>dependencies</report>
              <report>dependency-management</report>
              <report>plugins</report>
              <report>plugin-management</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

      <!-- Generate source cross reference (XRef) for main and test sources -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>3.5.0</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>jxr</report>
              <report>test-jxr</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <!-- Generate an HTML report from Surefire test results under target/site/surefire-report.html -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <!-- Link tests to generated XRef; site phase will produce xref/xref-test via JXR -->
          <linkXRef>true</linkXRef>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
</project>
